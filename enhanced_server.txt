#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_http_server.h>
#include <PsychicHttp.h>
#include <ArduinoJson.h>
#include <vector>
#include <unordered_map>

// WiFi configuration
IPAddress AP_IP = IPAddress(192, 168, 120, 1);
IPAddress AP_GW = IPAddress(192, 168, 120, 1);
IPAddress AP_SN = IPAddress(255, 255, 255, 0);
#define AP_SSID "ESP32_AP"
#define AP_PASSWORD "01234567890"
#define AP_CHANNEL 6
#define AP_MAX_CONNECTIONS 8
#define MAX_WS_CLIENTS 8
#define MAX_SSE_CLIENTS 8

// Authentication credentials - Change these for production!
#define ADMIN_USERNAME "admin"
#define ADMIN_PASSWORD "tracking2024"

// Server configuration
PsychicHttpServer server;
const unsigned int serverPort = 80;
const unsigned int maxURI = 25; // Increased for more endpoints
const unsigned int maxSockets = 12;
const unsigned int lingerTimeout = 3;
const unsigned int taskPriority = 12;
const unsigned int stackSize = 25600;

// WebSocket and SSE handlers
PsychicWebSocketHandler wsHandler;
PsychicEventSource sseHandler;
std::vector<int> wsSockets;
std::vector<int> sseSockets;

// Task handles and semaphores
TaskHandle_t connectionAPHandler = NULL;
TaskHandle_t asyncServerHandler = NULL;
TaskHandle_t watchdogHandler = NULL;
SemaphoreHandle_t xWiFiReadySemaphore;
SemaphoreHandle_t dataMutex;

volatile bool AP_TaskSuccess = false;

// Enhanced sensor data structure with status tracking
struct SensorData
{
  String brand_CAR = "N/A";
  String model_CAR = "N/A";
  String pltNum_CAR = "N/A";
  String driver_RFID = "N/A";
  String uid_RFID = "N/A";
  String time_GPS = "N/A";
  String long_GPS = "N/A";
  String lat_GPS = "N/A";
  String alt_GPS = "N/A";
  String speed_GPS = "N/A";
  String sat_GPS = "N/A";
  String hdop_GPS = "N/A";
  
  // Status indicators for enhanced UI
  bool driverIdentified = false;
  bool gpsActive = false;
  bool systemHealthy = true;
  unsigned long lastUpdate = 0;
} sensorData;

// Driver mapping with additional info
std::unordered_map<std::string, std::string> driverMap = {
    {"5394B838", "Allan M."},
    {"63A70F02", "Paul Lino"},
    {"FB1D0F02", "Dave"},
    {"D9C5A998", "Rey"},
    {"9AC8BE24", "Grow A Garden Dela Cruz"},
    {"129791AB", "Mama mo"}
};

// Simple authentication check
bool isAuthenticated(PsychicRequest *req) {
  // Check for Authorization header
  if (req->hasHeader("Authorization")) {
    String auth = req->header("Authorization");
    // Simple Basic Auth - in production, use proper hashing!
    String expectedAuth = "Basic " + base64::encode(String(ADMIN_USERNAME) + ":" + String(ADMIN_PASSWORD));
    return auth == expectedAuth;
  }
  
  // Check for session cookie (simplified)
  if (req->hasHeader("Cookie")) {
    String cookies = req->header("Cookie");
    return cookies.indexOf("session=authenticated") != -1;
  }
  
  return false;
}

// Function to get driver name and update identification status
String getDriverName(const String &uid)
{
  std::string uidStd = uid.c_str();
  auto keyValue = driverMap.find(uidStd);
  
  if (keyValue != driverMap.end()) {
    // Update identification status when driver is found
    if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
      sensorData.driverIdentified = true;
      xSemaphoreGive(dataMutex);
    }
    return String(keyValue->second.c_str());
  } else {
    // Update status when driver is not identified
    if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
      sensorData.driverIdentified = false;
      xSemaphoreGive(dataMutex);
    }
    return "Unknown Driver";
  }
}

// Thread-safe data getter
SensorData getSensorData()
{
  SensorData getData;
  if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
    getData = sensorData;
    xSemaphoreGive(dataMutex);
  }
  return getData;
}

// Enhanced thread-safe data setter with status updates
void setSensorData(const JsonDocument &doc)
{
  if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
    // Update basic data
    sensorData.brand_CAR = doc["brand"] | sensorData.brand_CAR;
    sensorData.model_CAR = doc["model"] | sensorData.model_CAR;
    sensorData.pltNum_CAR = doc["pltNum"] | sensorData.pltNum_CAR;
    sensorData.uid_RFID = doc["uid"] | sensorData.uid_RFID;
    sensorData.driver_RFID = getDriverName(sensorData.uid_RFID);
    sensorData.time_GPS = doc["time"] | sensorData.time_GPS;
    sensorData.long_GPS = doc["long"] | sensorData.long_GPS;
    sensorData.lat_GPS = doc["lat"] | sensorData.lat_GPS;
    sensorData.alt_GPS = doc["alt"] | sensorData.alt_GPS;
    sensorData.speed_GPS = doc["spd"] | sensorData.speed_GPS;
    sensorData.sat_GPS = doc["sat"] | sensorData.sat_GPS;
    sensorData.hdop_GPS = doc["hdop"] | sensorData.hdop_GPS;
    
    // Update status indicators
    sensorData.gpsActive = (sensorData.lat_GPS != "N/A" && sensorData.long_GPS != "N/A");
    sensorData.systemHealthy = true; // System is healthy if we're receiving data
    sensorData.lastUpdate = millis();
    
    xSemaphoreGive(dataMutex);
  }
}

// Create enhanced JSON with status information
String createSensorJSON(const SensorData &data)
{
  JsonDocument doc;
  doc["brand"] = data.brand_CAR;
  doc["model"] = data.model_CAR;
  doc["pltNum"] = data.pltNum_CAR;
  doc["driver"] = data.driver_RFID;
  doc["uid"] = data.uid_RFID;
  doc["time"] = data.time_GPS;
  doc["long"] = data.long_GPS;
  doc["lat"] = data.lat_GPS;
  doc["alt"] = data.alt_GPS;
  doc["spd"] = data.speed_GPS;
  doc["sat"] = data.sat_GPS;
  doc["hdop"] = data.hdop_GPS;
  
  // Add status information
  doc["driverIdentified"] = data.driverIdentified;
  doc["gpsActive"] = data.gpsActive;
  doc["systemHealthy"] = data.systemHealthy;
  doc["lastUpdate"] = data.lastUpdate;

  String output;
  serializeJson(doc, output);
  return output;
}

// Enhanced broadcast function with status data
void broadcastSensorData(const SensorData &data)
{
  String jsonData = createSensorJSON(data);

  // Broadcast via WebSocket
  if (wsSockets.size() < MAX_WS_CLIENTS) {
    for (int sock : wsSockets) {
      if (auto *client = wsHandler.getClient(sock)) {
        client->sendMessage(jsonData.c_str());
      }
    }
  }

  // Broadcast via SSE with status information
  if (sseSockets.size() < MAX_SSE_CLIENTS) {
    sseHandler.send("brand", data.brand_CAR.c_str());
    sseHandler.send("model", data.model_CAR.c_str());
    sseHandler.send("pltNum", data.pltNum_CAR.c_str());
    sseHandler.send("driver", data.driver_RFID.c_str());
    sseHandler.send("uid", data.uid_RFID.c_str());
    sseHandler.send("time", data.time_GPS.c_str());
    sseHandler.send("long", data.long_GPS.c_str());
    sseHandler.send("lat", data.lat_GPS.c_str());
    sseHandler.send("alt", data.alt_GPS.c_str());
    sseHandler.send("spd", data.speed_GPS.c_str());
    sseHandler.send("sat", data.sat_GPS.c_str());
    sseHandler.send("hdop", data.hdop_GPS.c_str());
    
    // Send status updates
    sseHandler.send("driverIdentified", data.driverIdentified ? "true" : "false");
    sseHandler.send("gpsActive", data.gpsActive ? "true" : "false");
    sseHandler.send("systemHealthy", data.systemHealthy ? "true" : "false");
  }
}

// Login page HTML
String getLoginPage() {
  return R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vehicle Tracking - Login</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 1rem;
    }
    
    .login-container {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
      width: 100%;
      max-width: 400px;
    }
    
    .login-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .login-header h1 {
      color: #333;
      font-size: 1.8rem;
      margin-bottom: 0.5rem;
    }
    
    .login-header p {
      color: #666;
      font-size: 0.9rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-group label {
      display: block;
      color: #333;
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    
    .form-group input {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid #e1e5e9;
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }
    
    .form-group input:focus {
      outline: none;
      border-color: #667eea;
    }
    
    .login-btn {
      width: 100%;
      padding: 0.75rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.2s ease;
    }
    
    .login-btn:hover {
      transform: translateY(-2px);
    }
    
    .error-message {
      color: #e74c3c;
      text-align: center;
      margin-top: 1rem;
      display: none;
    }
  </style>
</head>
<body>
  <div class="login-container">
    <div class="login-header">
      <h1>🚗 Vehicle Tracking</h1>
      <p>Please login to access the dashboard</p>
    </div>
    <form id="loginForm">
      <div class="form-group">
        <label for="username">Username</label>
        <input type="text" id="username" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required>
      </div>
      <button type="submit" class="login-btn">Login</button>
      <div class="error-message" id="errorMessage">Invalid credentials</div>
    </form>
  </div>
  
  <script>
    document.getElementById('loginForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      
      fetch('/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({username, password})
      })
      .then(response => {
        if (response.ok) {
          // Set session cookie and redirect
          document.cookie = 'session=authenticated; path=/';
          window.location.href = '/dashboard';
        } else {
          document.getElementById('errorMessage').style.display = 'block';
        }
      })
      .catch(error => {
        console.error('Login error:', error);
        document.getElementById('errorMessage').style.display = 'block';
      });
    });
  </script>
</body>
</html>
)rawliteral";
}

// Enhanced dashboard HTML with status indicators
String getDashboardPage() {
  return R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vehicle Tracking Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Segoe UI', sans-serif;
      background-color: #f5f7fa;
      color: #2c3e50;
      min-height: 100vh;
      padding: 1rem;
    }

    .header {
      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
      color: white;
      padding: 1.5rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      box-shadow: 0 4px 20px rgba(44, 62, 80, 0.3);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .header h1 {
      font-size: 1.8rem;
      font-weight: 600;
      margin: 0;
    }

    .header-controls {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .logout-btn {
      padding: 0.5rem 1rem;
      background: rgba(231, 76, 60, 0.8);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background 0.3s ease;
    }

    .logout-btn:hover {
      background: #e74c3c;
    }

    /* Status Bar with Visual Indicators */
    .status-bar {
      background: white;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-weight: 500;
      font-size: 0.9rem;
      transition: all 0.3s ease;
    }

    /* Status Color Coding */
    .status-driver-identified {
      background: #d4edda;
      color: #155724;
      border: 2px solid #c3e6cb;
    }

    .status-driver-unknown {
      background: #fff3cd;
      color: #856404;
      border: 2px solid #ffeaa7;
    }

    .status-gps-active {
      background: #d4edda;
      color: #155724;
      border: 2px solid #c3e6cb;
    }

    .status-gps-inactive {
      background: #f8d7da;
      color: #721c24;
      border: 2px solid #f5c6cb;
    }

    .status-system-healthy {
      background: #d4edda;
      color: #155724;
      border: 2px solid #c3e6cb;
    }

    .status-system-error {
      background: #f8d7da;
      color: #721c24;
      border: 2px solid #f5c6cb;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      display: inline-block;
    }

    .indicator-green { background: #28a745; }
    .indicator-yellow { background: #ffc107; }
    .indicator-red { background: #dc3545; }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }

    .card {
      background: white;
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      border-left: 4px solid #3498db;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    .card h2 {
      color: #2c3e50;
      font-size: 1.3rem;
      font-weight: 600;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .data-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.8rem 0;
      border-bottom: 1px solid #ecf0f1;
    }

    .data-row:last-child {
      border-bottom: none;
    }

    .label {
      font-size: 0.95rem;
      font-weight: 500;
      color: #7f8c8d;
      flex: 1;
    }

    .value {
      font-size: 1rem;
      font-weight: 600;
      color: #2c3e50;
      background: #f8f9fa;
      padding: 0.4rem 0.8rem;
      border-radius: 6px;
      flex: 1;
      text-align: right;
      transition: all 0.3s ease;
    }

    .value.updated {
      background: #e8f5e8;
      color: #27ae60;
      animation: pulse 0.5s ease;
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }

    /* Special styling for different card types */
    .card.vehicle-card { border-left-color: #e74c3c; }
    .card.driver-card { border-left-color: #f39c12; }
    .card.gps-card { border-left-color: #27ae60; }
    .card.movement-card { border-left-color: #9b59b6; }

    .icon {
      font-size: 1.4rem;
    }

    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        text-align: center;
      }
      
      .status-bar {
        flex-direction: column;
        align-items: stretch;
      }
      
      .status-item {
        justify-content: center;
      }
      
      .grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="header-content">
      <h1>🚗 Vehicle Tracking Dashboard</h1>
      <div class="header-controls">
        <button class="logout-btn" onclick="logout()">Logout</button>
      </div>
    </div>
  </div>

  <!-- Enhanced Status Bar with Visual Indicators -->
  <div class="status-bar">
    <div class="status-item" id="driverStatus">
      <span class="status-indicator indicator-yellow"></span>
      <span>Driver: Checking...</span>
    </div>
    <div class="status-item" id="gpsStatus">
      <span class="status-indicator indicator-yellow"></span>
      <span>GPS: Checking...</span>
    </div>
    <div class="status-item" id="systemStatus">
      <span class="status-indicator indicator-yellow"></span>
      <span>System: Checking...</span>
    </div>
    <div class="status-item" id="connectionStatus">
      <span class="status-indicator indicator-yellow"></span>
      <span>Connection: Connecting...</span>
    </div>
  </div>

  <div class="grid">
    <div class="card vehicle-card">
      <h2><span class="icon">🚙</span>Vehicle Information</h2>
      <div class="data-row">
        <span class="label">Brand:</span>
        <span class="value" id="brand">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">Model:</span>
        <span class="value" id="model">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">Plate Number:</span>
        <span class="value" id="pltNum">N/A</span>
      </div>
    </div>

    <div class="card driver-card">
      <h2><span class="icon">👤</span>Driver Details</h2>
      <div class="data-row">
        <span class="label">Driver Name:</span>
        <span class="value" id="driver">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">RFID Card UID:</span>
        <span class="value" id="uid">N/A</span>
      </div>
    </div>

    <div class="card gps-card">
      <h2><span class="icon">📍</span>GPS Location</h2>
      <div class="data-row">
        <span class="label">Time (UTC):</span>
        <span class="value" id="time">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">Latitude:</span>
        <span class="value" id="lat">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">Longitude:</span>
        <span class="value" id="long">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">Altitude (m):</span>
        <span class="value" id="alt">N/A</span>
      </div>
    </div>

    <div class="card movement-card">
      <h2><span class="icon">🚗</span>Movement Data</h2>
      <div class="data-row">
        <span class="label">Speed (km/h):</span>
        <span class="value" id="spd">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">Satellites:</span>
        <span class="value" id="sat">N/A</span>
      </div>
      <div class="data-row">
        <span class="label">HDOP:</span>
        <span class="value" id="hdop">N/A</span>
      </div>
    </div>
  </div>

  <script>
    let wsConnected = false, sseConnected = false;
    let lastDataReceived = 0;

    // Status update functions
    function updateDriverStatus(identified) {
      const element = document.getElementById('driverStatus');
      const indicator = element.querySelector('.status-indicator');
      const text = element.querySelector('span:last-child');
      
      if (identified) {
        element.className = 'status-item status-driver-identified';
        indicator.className = 'status-indicator indicator-green';
        text.textContent = 'Driver: Identified ✓';
      } else {
        element.className = 'status-item status-driver-unknown';
        indicator.className = 'status-indicator indicator-yellow';
        text.textContent = 'Driver: Unknown';
      }
    }

    function updateGpsStatus(active) {
      const element = document.getElementById('gpsStatus');
      const indicator = element.querySelector('.status-indicator');
      const text = element.querySelector('span:last-child');
      
      if (active) {
        element.className = 'status-item status-gps-active';
        indicator.className = 'status-indicator indicator-green';
        text.textContent = 'GPS: Active ✓';
      } else {
        element.className = 'status-item status-gps-inactive';
        indicator.className = 'status-indicator indicator-red';
        text.textContent = 'GPS: No Signal';
      }
    }

    function updateSystemStatus(healthy) {
      const element = document.getElementById('systemStatus');
      const indicator = element.querySelector('.status-indicator');
      const text = element.querySelector('span:last-child');
      
      if (healthy) {
        element.className = 'status-item status-system-healthy';
        indicator.className = 'status-indicator indicator-green';
        text.textContent = 'System: Healthy ✓';
      } else {
        element.className = 'status-item status-system-error';
        indicator.className = 'status-indicator indicator-red';
        text.textContent = 'System: Error';
      }
    }

    function updateConnectionStatus() {
      const element = document.getElementById('connectionStatus');
      const indicator = element.querySelector('.status-indicator');
      const text = element.querySelector('span:last-child');
      
      if (wsConnected || sseConnected) {
        element.className = 'status-item status-system-healthy';
        indicator.className = 'status-indicator indicator-green';
        text.textContent = 'Connection: Online ✓';
      } else {
        element.className = 'status-item status-system-error';
        indicator.className = 'status-indicator indicator-red';
        text.textContent = 'Connection: Offline';
      }
    }

    function updateField(id, value, animate = true) {
      const element = document.getElementById(id);
      if (element && element.textContent !== value) {
        element.textContent = value;
        if (animate) {
          element.classList.add('updated');
          setTimeout(() => element.classList.remove('updated'), 500);
        }
      }
    }

    // WebSocket connection
    const ws = new WebSocket(`ws://${location.host}/ws`);
    ws.onopen = () => {
      wsConnected = true;
      updateConnectionStatus();
      console.log('WebSocket connected');
    };
    
    ws.onclose = () => {
      wsConnected = false;
      updateConnectionStatus();
      console.log('WebSocket disconnected');
    };
    
    ws.onmessage = e => {
      try {
        const data = JSON.parse(e.data);
        lastDataReceived = Date.now();
        
        // Update all field values
        Object.keys(data).forEach(key => {
          if (key !== 'driverIdentified' && key !== 'gpsActive' && key !== 'systemHealthy' && key !== 'lastUpdate') {
            updateField(key, data[key]);
          }
        });
        
        // Update status indicators
        if (data.hasOwnProperty('driverIdentified')) {
          updateDriverStatus(data.driverIdentified);
        }
        if (data.hasOwnProperty('gpsActive')) {
          updateGpsStatus(data.gpsActive);
        }
        if (data.hasOwnProperty('systemHealthy')) {
          update